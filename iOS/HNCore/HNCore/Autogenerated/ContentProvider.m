//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../HNCore/Java-core/src/main//java/io/ernesto/hn/ContentProvider.java
//

#include "ContentProvider.h"
#include "Fetcher.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Story.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/FutureTask.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/annotation/Nullable.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONException.h"

@interface IOEContentProvider () {
 @public
  IOEFetcher *listFetcher_;
  NSString *contentPath_;
}

@end

J2OBJC_FIELD_SETTER(IOEContentProvider, listFetcher_, IOEFetcher *)
J2OBJC_FIELD_SETTER(IOEContentProvider, contentPath_, NSString *)

__attribute__((unused)) static IOSObjectArray *IOEContentProvider__Annotations$0();

__attribute__((unused)) static IOSObjectArray *IOEContentProvider__Annotations$1();

@interface IOEContentProvider_1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  IOEContentProvider *this$0_;
  NSString *val$contentPath_;
}

- (instancetype)initWithIOEContentProvider:(IOEContentProvider *)outer$
                              withNSString:(NSString *)capture$0;

- (NSString *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(IOEContentProvider_1)

__attribute__((unused)) static void IOEContentProvider_1_initWithIOEContentProvider_withNSString_(IOEContentProvider_1 *self, IOEContentProvider *outer$, NSString *capture$0);

__attribute__((unused)) static IOEContentProvider_1 *new_IOEContentProvider_1_initWithIOEContentProvider_withNSString_(IOEContentProvider *outer$, NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOEContentProvider_1 *create_IOEContentProvider_1_initWithIOEContentProvider_withNSString_(IOEContentProvider *outer$, NSString *capture$0);

#line 1 "/Users/ernesto.torres/Documents/Repositories/Personal/HackerNews/HNCore/Java-core/src/main/java/io/ernesto/hn/ContentProvider.java"


#line 16
@implementation IOEContentProvider


#line 20
- (instancetype)initWithNSString:(NSString *)baseURL
                    withNSString:(NSString *)contentPath {
  IOEContentProvider_initWithNSString_withNSString_(self, baseURL, contentPath);
  return self;
}


#line 25
- (OrgJsonJSONArray * __nullable)getStoryList {
  NSString *contentPath = self->contentPath_;
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  
#line 29
  JavaUtilConcurrentFutureTask *future = new_JavaUtilConcurrentFutureTask_initWithJavaUtilConcurrentCallable_(new_IOEContentProvider_1_initWithIOEContentProvider_withNSString_(self, contentPath));
  
#line 37
  (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaLangRunnable:future];
  
#line 39
  @try {
    NSString *response = [future getWithLong:5000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    if (response != nil) {
      OrgJsonJSONArray *storyIdList = new_OrgJsonJSONArray_initWithNSString_(response);
      return storyIdList;
    }
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
  
#line 50
  return nil;
}


#line 53
- (IOSObjectArray * __nullable)getStories {
  OrgJsonJSONArray *storyIdList = [self getStoryList];
  
#line 56
  if (storyIdList == nil) {
    
#line 56
    return nil;
  }
  IOSObjectArray *stories = [IOSObjectArray newArrayWithLength:[storyIdList length] type:IOEStory_class_()];
  for (jint i = 0; i < [storyIdList length]; i++) {
    NSString *title = @"invalid";
    @try {
      title = [new_JavaLangInteger_initWithInt_([storyIdList getIntWithInt:i]) description];
    }
    @catch (OrgJsonJSONException *e) {
      [e printStackTrace];
    }
    
#line 68
    IOEStory *story = new_IOEStory_initWithNSString_withNSString_withNSString_withNSString_(title, @"", @"", @"");
    (void) IOSObjectArray_Set(stories, i, story);
  }
  return stories;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "[LIOEStory;", 0x1, -1, -1, -1, -1, 2, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getStoryList);
  methods[2].selector = @selector(getStories);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "listFetcher_", "LIOEFetcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "contentPath_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", (void *)&IOEContentProvider__Annotations$0, (void *)&IOEContentProvider__Annotations$1 };
  static const J2ObjcClassInfo _IOEContentProvider = { "ContentProvider", "io.ernesto.hn", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_IOEContentProvider;
}

@end


#line 20
void IOEContentProvider_initWithNSString_withNSString_(IOEContentProvider *self, NSString *baseURL, NSString *contentPath) {
  NSObject_init(self);
  
#line 21
  self->listFetcher_ = new_IOEFetcher_initWithNSString_(baseURL);
  self->contentPath_ = contentPath;
}


#line 20
IOEContentProvider *new_IOEContentProvider_initWithNSString_withNSString_(NSString *baseURL, NSString *contentPath) {
  J2OBJC_NEW_IMPL(IOEContentProvider, initWithNSString_withNSString_, baseURL, contentPath)
}


#line 20
IOEContentProvider *create_IOEContentProvider_initWithNSString_withNSString_(NSString *baseURL, NSString *contentPath) {
  J2OBJC_CREATE_IMPL(IOEContentProvider, initWithNSString_withNSString_, baseURL, contentPath)
}

IOSObjectArray *IOEContentProvider__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IOEContentProvider__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IOEContentProvider)

#line 1 "/Users/ernesto.torres/Documents/Repositories/Personal/HackerNews/HNCore/Java-core/src/main/java/io/ernesto/hn/ContentProvider.java"


#line 30
@implementation IOEContentProvider_1


#line 30
- (instancetype)initWithIOEContentProvider:(IOEContentProvider *)outer$
                              withNSString:(NSString *)capture$0 {
  IOEContentProvider_1_initWithIOEContentProvider_withNSString_(self, outer$, capture$0);
  return self;
}


#line 31
- (NSString *)call {
  
#line 33
  return [((IOEFetcher *) nil_chk(this$0_->listFetcher_)) fetchURLSegment:val$contentPath_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOEContentProvider:withNSString:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIOEContentProvider;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$contentPath_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LIOEContentProvider;", "getStoryList", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _IOEContentProvider_1 = { "", "io.ernesto.hn", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, 3, -1 };
  return &_IOEContentProvider_1;
}

@end


#line 30
void IOEContentProvider_1_initWithIOEContentProvider_withNSString_(IOEContentProvider_1 *self, IOEContentProvider *outer$, NSString *capture$0) {
  self->this$0_ = outer$;
  self->val$contentPath_ = capture$0;
  NSObject_init(self);
}


#line 30
IOEContentProvider_1 *new_IOEContentProvider_1_initWithIOEContentProvider_withNSString_(IOEContentProvider *outer$, NSString *capture$0) {
  J2OBJC_NEW_IMPL(IOEContentProvider_1, initWithIOEContentProvider_withNSString_, outer$, capture$0)
}


#line 30
IOEContentProvider_1 *create_IOEContentProvider_1_initWithIOEContentProvider_withNSString_(IOEContentProvider *outer$, NSString *capture$0) {
  J2OBJC_CREATE_IMPL(IOEContentProvider_1, initWithIOEContentProvider_withNSString_, outer$, capture$0)
}
