//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../../HNCore/Java-core/src/main//java/io/ernesto/hn/Fetcher.java
//

#include "Fetcher.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/StringBuffer.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "javax/net/ssl/HttpsURLConnection.h"

@interface IOEFetcher () {
 @public
  NSString *baseURL_;
}

@end

J2OBJC_FIELD_SETTER(IOEFetcher, baseURL_, NSString *)

inline IOSClass *IOEFetcher_get_unused0();
static IOSClass *IOEFetcher_unused0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IOEFetcher, unused0, IOSClass *)

#line 1 "/Users/ernesto.torres/Documents/Repositories/Personal/HackerNews/HNCore/Java-core/src/main/java/io/ernesto/hn/Fetcher.java"

J2OBJC_INITIALIZED_DEFN(IOEFetcher)


#line 11
@implementation IOEFetcher


#line 15
- (instancetype)initWithNSString:(NSString *)baseURL {
  IOEFetcher_initWithNSString_(self, baseURL);
  return self;
}


#line 19
- (NSString *)fetchURLSegment:(NSString *)segment {
  
#line 21
  JavaNetHttpURLConnection *connection = nil;
  JavaIoBufferedReader *reader = nil;
  
#line 24
  @try {
    JavaNetURL *url = new_JavaNetURL_initWithNSString_(JreStrcat("$$", self->baseURL_, segment));
    connection = (JavaNetHttpURLConnection *) cast_chk([url openConnection], [JavaNetHttpURLConnection class]);
    [((JavaNetHttpURLConnection *) nil_chk(connection)) connect];
    
#line 29
    JavaIoInputStream *in = [connection getInputStream];
    reader = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(in));
    
#line 32
    JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
    NSString *line;
    
#line 35
    while ((line = [reader readLine]) != nil) {
      (void) [buffer appendWithNSString:line];
    }
    
#line 39
    return [buffer description];
  }
  @catch (JavaNetMalformedURLException *e) {
    [e printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  @finally {
    if (connection != nil) {
      [connection disconnect];
    }
    if (reader != nil) {
      @try {
        [reader close];
      }
      @catch (JavaIoIOException *e) {
        [e printStackTrace];
      }
    }
  }
  
#line 61
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(fetchURLSegment:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unused0", "LIOSClass;", .constantValue.asLong = 0, 0x1a, -1, 2, 3, -1 },
    { "baseURL_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "fetchURLSegment", &IOEFetcher_unused0, "Ljava/lang/Class<*>;" };
  static const J2ObjcClassInfo _IOEFetcher = { "Fetcher", "io.ernesto.hn", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_IOEFetcher;
}

+ (void)initialize {
  if (self == [IOEFetcher class]) {
    IOEFetcher_unused0 =
#line 12
    JavaxNetSslHttpsURLConnection_class_();
    J2OBJC_SET_INITIALIZED(IOEFetcher)
  }
}

@end


#line 15
void IOEFetcher_initWithNSString_(IOEFetcher *self, NSString *baseURL) {
  NSObject_init(self);
  
#line 16
  self->baseURL_ = baseURL;
}


#line 15
IOEFetcher *new_IOEFetcher_initWithNSString_(NSString *baseURL) {
  J2OBJC_NEW_IMPL(IOEFetcher, initWithNSString_, baseURL)
}


#line 15
IOEFetcher *create_IOEFetcher_initWithNSString_(NSString *baseURL) {
  J2OBJC_CREATE_IMPL(IOEFetcher, initWithNSString_, baseURL)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IOEFetcher)
